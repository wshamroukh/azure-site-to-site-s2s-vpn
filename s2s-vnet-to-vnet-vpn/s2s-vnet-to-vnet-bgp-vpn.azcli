rg=s2s-vnet-to-vnet-bgp-vpn
location1=centralindia
location2=centralindia

hub1_vnet_name=hub1
hub1_vnet_address=10.1.0.0/16
hub1_gw_asn=65511
hub1_gw_subnet_address=10.1.0.0/24
hub1_vm_subnet_name=vm
hub1_vm_subnet_address=10.1.1.0/24

hub2_vnet_name=hub2
hub2_vnet_address=10.2.0.0/16
hub2_gw_asn=65512
hub2_gw_subnet_address=10.2.0.0/24
hub2_vm_subnet_name=vm
hub2_vm_subnet_address=10.2.1.0/24

spoke1_vnet_name=spoke1
spoke1_vnet_address=10.11.0.0/16
spoke1_vm_subnet_name=vm
spoke1_vm_subnet_address=10.11.1.0/24

spoke2_vnet_name=spoke2
spoke2_vnet_address=10.12.0.0/16
spoke2_vm_subnet_name=vm
spoke2_vm_subnet_address=10.12.1.0/24

admin_username=$(whoami)
myip=$(curl -s4 https://ifconfig.co/)

psk=secret12345
vm_size=Standard_B2ats_v2


function wait_until_finished {
     wait_interval=15
     resource_id=$1
     resource_name=$(echo $resource_id | cut -d/ -f 9)
     echo -e "\e[1;35mWaiting for resource $resource_name to finish provisioning...\e[0m"
     start_time=`date +%s`
     state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv | tr -d '\r')
     until [[ "$state" == "Succeeded" ]] || [[ "$state" == "Failed" ]] || [[ -z "$state" ]]
     do
        sleep $wait_interval
        state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv | tr -d '\r')
     done
     if [[ -z "$state" ]]
     then
        echo -e "\e[1;31mSomething really bad happened...\e[0m"
     else
        run_time=$(expr `date +%s` - $start_time)
        ((minutes=${run_time}/60))
        ((seconds=${run_time}%60))
        echo -e "\e[1;32mResource $resource_name provisioning state is $state, wait time $minutes minutes and $seconds seconds\e[0m"
     fi
}

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -n $rg -l $location1 -o none

# hub1 vnet
echo -e "\e[1;36mCreating $hub1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub1_vnet_name -l $location1 --address-prefixes $hub1_vnet_address --subnet-name $hub1_vm_subnet_name --subnet-prefixes $hub1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n GatewaySubnet --address-prefixes $hub1_gw_subnet_address --vnet-name $hub1_vnet_name -o none

# hub1 vm nsg
echo -e "\e[1;36mCreating $hub1_vnet_name-vm NSG...\e[0m"
az network nsg create -g $rg -n $hub1_vnet_name-vm -l $location1 -o none
az network nsg rule create -g $rg -n AllowSSH --nsg-name $hub1_vnet_name-vm --priority 1000 --access Allow --description AllowSSH --protocol Tcp --direction Inbound --destination-address-prefixes '*' --destination-port-ranges 22 --source-address-prefixes $myip --source-port-ranges '*' -o none
az network vnet subnet update -g $rg -n $hub1_vm_subnet_name --vnet-name $hub1_vnet_name --nsg $hub1_vnet_name-vm -o none

# hub1 VPN GW
echo -e "\e[1;36mDeploying $hub1_vnet_name-gw VPN Gateway...\e[0m"
az network public-ip create -g $rg -n $hub1_vnet_name-gw-pubip -l $location1 --allocation-method Static -o none
az network vnet-gateway create -g $rg -n $hub1_vnet_name-gw --public-ip-addresses $hub1_vnet_name-gw-pubip --vnet $hub1_vnet_name --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased --asn $hub1_gw_asn --no-wait

# hub2 vnet
echo -e "\e[1;36mCreating $hub2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub2_vnet_name -l $location1 --address-prefixes $hub2_vnet_address --subnet-name $hub2_vm_subnet_name --subnet-prefixes $hub2_vm_subnet_address -o none
az network vnet subnet create -g $rg -n GatewaySubnet --address-prefixes $hub2_gw_subnet_address --vnet-name $hub2_vnet_name -o none

# hub2 VPN GW
echo -e "\e[1;36mDeploying $hub2_vnet_name-gw VPN Gateway...\e[0m"
az network public-ip create -g $rg -n $hub2_vnet_name-gw-pubip -l $location1 --allocation-method Static -o none
az network vnet-gateway create -g $rg -n $hub2_vnet_name-gw --public-ip-addresses $hub2_vnet_name-gw-pubip --vnet $hub2_vnet_name --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased --asn $hub2_gw_asn --no-wait

# spoke1 vnet
echo -e "\e[1;36mCreating $spoke1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke1_vnet_name -l $location1 --address-prefixes $spoke1_vnet_address --subnet-name $spoke1_vm_subnet_name --subnet-prefixes $spoke1_vm_subnet_address -o none

# spoke2 vnet
echo -e "\e[1;36mCreating $spoke2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke2_vnet_name -l $location1 --address-prefixes $spoke2_vnet_address --subnet-name $spoke2_vm_subnet_name --subnet-prefixes $spoke2_vm_subnet_address -o none

# hub1 vm
echo -e "\e[1;36mDeploying $hub1_vnet_name VM...\e[0m"
az network nic create -g $rg -n $hub1_vnet_name -l $location1 --vnet-name $hub1_vnet_name --subnet $hub1_vm_subnet_name -o none
az vm create -g $rg -n $hub1_vnet_name -l $location1 --image Ubuntu2404 --nics $hub1_vnet_name --os-disk-name $hub1_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
hub1_vm_ip=$(az network nic show -g $rg -n $hub1_vnet_name --query ipConfigurations[0].privateIPAddress -o tsv | tr -d '\r')

# spoke1 vm
echo -e "\e[1;36mDeploying $spoke1_vnet_name VM...\e[0m"
az network nic create -g $rg -n $spoke1_vnet_name -l $location1 --vnet-name $spoke1_vnet_name --subnet $spoke1_vm_subnet_name -o none
az vm create -g $rg -n $spoke1_vnet_name -l $location1 --image Ubuntu2404 --nics $spoke1_vnet_name --os-disk-name $spoke1_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
spoke1_vm_ip=$(az network nic show -g $rg -n $spoke1_vnet_name --query ipConfigurations[0].privateIPAddress -o tsv | tr -d '\r')

# hub2 vm
echo -e "\e[1;36mDeploying $hub2_vnet_name VM...\e[0m"
az network nic create -g $rg -n $hub2_vnet_name -l $location1 --vnet-name $hub2_vnet_name --subnet $hub2_vm_subnet_name -o none
az vm create -g $rg -n $hub2_vnet_name -l $location1 --image Ubuntu2404 --nics $hub2_vnet_name --os-disk-name $hub2_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
hub2_vm_ip=$(az network nic show -g $rg -n $hub2_vnet_name --query ipConfigurations[0].privateIPAddress -o tsv | tr -d '\r')

# spoke2 vm
echo -e "\e[1;36mDeploying $spoke2_vnet_name VM...\e[0m"
az network nic create -g $rg -n $spoke2_vnet_name -l $location1 --vnet-name $spoke2_vnet_name --subnet $spoke2_vm_subnet_name -o none
az vm create -g $rg -n $spoke2_vnet_name -l $location1 --image Ubuntu2404 --nics $spoke2_vnet_name --os-disk-name $spoke2_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
spoke2_vm_ip=$(az network nic show -g $rg -n $spoke2_vnet_name --query ipConfigurations[0].privateIPAddress -o tsv | tr -d '\r')

# jump vm in hub1
echo -e "\e[1;36mDeploying $hub1_vnet_name-jmp VM...\e[0m"
az network public-ip create -g $rg -n $hub1_vnet_name-jmp --allocation-method static --sku Basic -o none
az network nic create -g $rg -n $hub1_vnet_name-jmp -l $location1 --public-ip-address $hub1_vnet_name-jmp --vnet-name $hub1_vnet_name --subnet $hub1_vm_subnet_name -o none
az vm create -g $rg -n $hub1_vnet_name-jmp -l $location1 --image Ubuntu2404 --nics  $hub1_vnet_name-jmp --os-disk-name $hub1_vnet_name-jmp --size $vm_size --admin-username $admin_username --generate-ssh-keys -o none
hub1_jmp_pip=$(az network public-ip show -g $rg -n $hub1_vnet_name-jmp --query ipAddress -o tsv | tr -d '\r') && echo $hub1_vnet_name-jmp: $hub1_jmp_pip

# waiting on hub1 vpn gw to finish deployment
hub1_gw_id=$(az network vnet-gateway show -g $rg -n $hub1_vnet_name-gw --query id -o tsv | tr -d '\r')
wait_until_finished $hub1_gw_id

# Getting hub1 VPN GW details
echo -e "\e[1;36mGetting $hub1_vnet_name-gw VPN Gateway details...\e[0m"
hub1_gw_pubip=$(az network vnet-gateway show -n $hub1_vnet_name-gw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv | tr -d '\r') && echo $hub1_vnet_name-gw: $hub1_gw_pubip
hub1_gw_bgp_ip=$(az network vnet-gateway show -n $hub1_vnet_name-gw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv | tr -d '\r') && echo $hub1_vnet_name-gw: $hub1_gw_bgp_ip

# waiting on hub2 vpn gw to finish deployment
hub2_gw_id=$(az network vnet-gateway show -g $rg -n $hub2_vnet_name-gw --query id -o tsv | tr -d '\r')
wait_until_finished $hub2_gw_id

# Getting hub2 VPN GW details
echo -e "\e[1;36mGetting $hub2_vnet_name-gw VPN Gateway details...\e[0m"
hub2_gw_pubip=$(az network vnet-gateway show -n $hub2_vnet_name-gw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv | tr -d '\r') && echo $hub2_vnet_name-gw: $hub2_gw_pubip
hub2_gw_bgp_ip=$(az network vnet-gateway show -n $hub2_vnet_name-gw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv | tr -d '\r') && echo $hub2_vnet_name-gw: $hub2_gw_bgp_ip

# VNet Peering between hub1 and spoke1
echo -e "\e[1;36mCreating VNet peerring between $hub1_vnet_name and $spoke1_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $hub1_vnet_name-to-$spoke1_vnet_name-peering --remote-vnet $spoke1_vnet_name --vnet-name $hub1_vnet_name --allow-forwarded-traffic --allow-gateway-transit --allow-vnet-access -o none
az network vnet peering create -g $rg -n $spoke1_vnet_name-to-$hub1_vnet_name-peering --remote-vnet $hub1_vnet_name --vnet-name $spoke1_vnet_name --use-remote-gateways --allow-vnet-access -o none

# VNet Peering between hub2 and spoke2
echo -e "\e[1;36mCreating VNet peerring between $hub2_vnet_name and $spoke2_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $hub2_vnet_name-to-$spoke2_vnet_name-peering --remote-vnet $spoke2_vnet_name --vnet-name $hub2_vnet_name --allow-forwarded-traffic --allow-gateway-transit --allow-vnet-access -o none
az network vnet peering create -g $rg -n $spoke2_vnet_name-to-$hub2_vnet_name-peering --remote-vnet $hub2_vnet_name --vnet-name $spoke2_vnet_name --use-remote-gateways --allow-vnet-access -o none

# creating VPN connection between hub1 vpn gw and hub2 vpn gw
echo -e "\e[1;36mCreating $hub1_vnet_name-gw-to-$hub2_vnet_name-gw-s2s-connection...\e[0m"
az network vpn-connection create -g $rg -n $hub1_vnet_name-gw-to-$hub2_vnet_name-gw-s2s-connection --vnet-gateway1 $hub1_vnet_name-gw --vnet-gateway2 $hub2_vnet_name-gw --shared-key $psk --enable-bgp -o none

# creating VPN connection between hub2 vpn gw and hub1 vpn gw
echo -e "\e[1;36mCreating $hub2_vnet_name-gw-to-$hub1_vnet_name-gw-s2s-connection...\e[0m"
az network vpn-connection create -g $rg -n $hub2_vnet_name-gw-to-$hub1_vnet_name-gw-s2s-connection --vnet-gateway1 $hub2_vnet_name-gw --vnet-gateway2 $hub1_vnet_name-gw --shared-key $psk --enable-bgp -o none

#############
# Diagnosis #
#############
echo -e "\e[1;36mTring to checking reachability from $hub1-jmp vm to the rest of network topology..\e[0m"
scp -o StrictHostKeyChecking=no ~/.ssh/* $hub1_jmp_pip:/home/$admin_username/.ssh/
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_jmp_pip "ping -c 3 $hub1_vm_ip"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_jmp_pip "ping -c 3 $spoke1_vm_ip"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_jmp_pip "ping -c 3 $hub2_vm_ip"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_jmp_pip "ping -c 3 $spoke2_vm_ip"

# BGP data 
echo -e "\e[1;36mChecking bgp status on $hub1_vnet_name-gw..\e[0m"
az network vnet-gateway list-bgp-peer-status -g $rg -n $hub1_vnet_name-gw -o table
az network vnet-gateway list-advertised-routes -g $rg -n $hub1_vnet_name-gw --peer $hub2_gw_bgp_ip -o table
az network vnet-gateway list-learned-routes -g $rg -n $hub1_vnet_name-gw -o table

echo -e "\e[1;36mChecking bgp status on $hub2_vnet_name-gw..\e[0m"
az network vnet-gateway list-bgp-peer-status -g $rg -n $hub2_vnet_name-gw -o table
az network vnet-gateway list-advertised-routes -g $rg -n $hub2_vnet_name-gw --peer $hub1_gw_bgp_ip -o table
az network vnet-gateway list-learned-routes -g $rg -n $hub2_vnet_name-gw -o table

#cleanup
# az group delete -g $rg -y --no-wait